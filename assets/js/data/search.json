[
  
  {
    "title": "配置python jupyter 远程访问",
    "url": "/posts/%E9%85%8D%E7%BD%AEpython-jupyter%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/",
    "categories": "Python, jupyter",
    "tags": "Python",
    "date": "2024-07-02 17:00:00 +0800",
    





    
    "snippet": "概述Jupyter Notebook是一种可共享的文档，它结合了计算机代码、简单语言描述、数据、丰富的可视化效果（如 3D 模型、图表、图形和图形）以及交互式控件。笔记本和编辑器（如 JupyterLab）提供了一个快速的交互环境，用于原型设计和解释代码、探索和可视化数据以及与他人分享想法简而言之，Jupyter Notebook是以网页的形式打开，相当于一个网页版便携式的python 代码...",
    "content": "概述Jupyter Notebook是一种可共享的文档，它结合了计算机代码、简单语言描述、数据、丰富的可视化效果（如 3D 模型、图表、图形和图形）以及交互式控件。笔记本和编辑器（如 JupyterLab）提供了一个快速的交互环境，用于原型设计和解释代码、探索和可视化数据以及与他人分享想法简而言之，Jupyter Notebook是以网页的形式打开，相当于一个网页版便携式的python 代码工具，可以在网页页面中可以直接编写代码和运行代码，代码的运行结果也会直接在代码块下显示。如在编程过程中需要编写说明文档，可在同一个页面中直接编写，便于作及时的说明和解释。配置python虚拟开发环境安装jupyter最好先指定一个虚拟开发环境，避免污染全局的配置。怎么配置python的虚拟开发环境可以参考一文了解virtualenv、pyvenv、pyenv、pyenv virtualenv-腾讯云开发者社区-腾讯云 (tencent.com)┌─[✗]─[wxj@devC]─[/data/Python]└──╼ $ python3 -VPython 3.11.2┌─[wxj@devC]─[/data/Python]└──╼ $ python3 -m venv pyenv┌─[wxj@devC]─[/data/Python]└──╼ $┌─[wxj@devC]─[/data/Python]└──╼ $ source pyenv/bin/activate ## pyenv/bin/activate 实际就是一个文本文件，可以直接查看执行逻辑(pyenv) ┌─[wxj@devC]─[/data/Python] ## 这里(pyenv)就表示当前的开发环境是刚才创建的虚拟开发环境└──╼ $## 配置好之后可以直接查看当前的python信息(pyenv) ┌─[wxj@devC]─[/data/Python]└──╼ $ python -VPython 3.11.2(pyenv) ┌─[wxj@devC]─[/data/Python]└──╼ $ pip -Vpip 23.0.1 from /data/Python/pyenv/lib/python3.11/site-packages/pip (python 3.11)(pyenv) ┌─[wxj@devC]─[/data/Python]└──╼ $ pip listPackage    Version---------- -------pip        23.0.1setuptools 66.1.1(pyenv) ┌─[wxj@devC]─[/data/Python]└──╼ $安装 jupyter notebook## pip install jupyter## 指定下载源为清华源pip install -i https://pypi.tuna.tsinghua.edu.cn/simple jupyterpip list## 安装完成之后可以查看帮助说明，大概了解使用命令jupyter notebook --help使用 jupyter notebook启动启动 jupyter notebook就比较简单了，可以直接不带任何参数启动。默认是127.0.0.1:8888，如果8888端口被占用，会使用其他端口，例如8889。使用本地浏览器打开对应的地址即可。jupyter notebook## 如果使用root用户启动的话，需要添加参数 --allow-rootjupyter notebook --allow-root停止直接使用crtl+c就可以退出。这里需要输入‘y’才会退出，如果超过5s没有输入，则会继续运行。终端关闭或者终止jupyter进程，jupyter notebook也就退出了，无法继续使用浏览器访问。可以使用nohup的方式后台运行程序：nohup jupyter notebook &amp;&gt; notebook.log &amp;也可以使用screen等工具在后台运行，防止终端异常断开之后无法继续使用。很多时候程序都是部署在远程的，需要通过连接的方式访问，jupyter notebook 默认是通过本地访问的。配置远程访问jupyter设置密码先输入python3进入交互模式，输入密码，需要注意的是交互输入的原文密码在终端是不会显示的。如果不想交互输入密码也可以直接将密码写在函数中：passwd('passwd')如果想指定加密方式为sha1：passwd('passwd',algorithm='sha1')生成配置文件在终端输入执行以下命令：jupyter notebook --generate-config执行成功就会自动在根目录下生成文件（~/.jupyter/jupyter_notebook_config.py）,这里可以用vim或者其他文本编辑器编辑就行。这个文件的内容默认都是注释掉的。除了红框中的这一行。修改配置文件可以直接在文件末尾添加自己的配置参数，保险起见可以先备份一份原始文件。## 这里的{,.bak}表示逗号前的内容都相同，\".bak\"表示后缀/多余的字符，在操作文件名很长的时候可以节约tab或者手写的频率，相当于## cp ~/.jupyter/jupyter_notebook_config.py  ~/.jupyter/jupyter_notebook_config.py.bakcp ~/.jupyter/jupyter_notebook_config.py{,.bak}## 添加以下内容c.NotebookApp.ip='*' # 如果这里修过过后启动服务报错 则修改为c.NotebookApp.ip='0.0.0.0'c.NotebookApp.password=u'argon2:$argon2id$v=19$m=10240,t=10,p=8$YPy6gq6WBGap+NHlZAMZow$IR1WDR20vmzV+MzuRkwl3NRYH1AoKsIZjYKsdclJM' #就之前保存的验证密码c.NotebookApp.open_browser =False # 设置是否自动打开浏览器，如果是远程的服务器可以关闭这个选项c.NotebookApp.port =4000  # 设置监听端口c.NotebookApp.allow_remote_access = True ## 允许远程访问c.NotebookApp.notebook_dir='work_dir' # 设置工作/根路径，如果不设置默认是启动jupyter命令时的目录保存退出之后运行jupyter即可。远程访问jupyternohup jupyter notebook &amp;&gt; notebook.log &amp;启动以后在本机的浏览器 输入http://{服务器ip}:port 进行访问。如果远程服务器或者云服务器配置了防火墙，记得打开白名单。打开之后输入之前设置的密码即可。之后就可以在浏览器中利用jupyter运行调试代码了。"
  },
  
  {
    "title": "配置pip镜像源",
    "url": "/posts/%E9%85%8D%E7%BD%AEpip%E9%95%9C%E5%83%8F%E6%BA%90/",
    "categories": "Python, pip",
    "tags": "Python",
    "date": "2024-07-01 17:00:00 +0800",
    





    
    "snippet": "很多时候pip下载安装包的时候都比较慢，可以直接指定为国内的镜像源，提高下载速度。## 查看当前的镜像源pip config list ## 国外镜像有时候下载较慢，可以直接指定国内镜像源下载pip install -i https://pypi.douban.com/simple/ flask## 修改pip的配置文件，将镜像源写入配置文件中。如果没有这个文件就新建一个cat ~/.pip...",
    "content": "很多时候pip下载安装包的时候都比较慢，可以直接指定为国内的镜像源，提高下载速度。## 查看当前的镜像源pip config list ## 国外镜像有时候下载较慢，可以直接指定国内镜像源下载pip install -i https://pypi.douban.com/simple/ flask## 修改pip的配置文件，将镜像源写入配置文件中。如果没有这个文件就新建一个cat ~/.pip/pip.conf[global]index-url = https://pypi.douban.com/simple/## 清华大学源cat ~/.pip/pip.conf[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple[install]trusted-host = https://pypi.tuna.tsinghua.edu.cn"
  },
  
  {
    "title": "WSL Fedora 升级",
    "url": "/posts/WSL-Fedora-%E5%8D%87%E7%BA%A7/",
    "categories": "Linux, Fedora",
    "tags": "WSL",
    "date": "2024-06-27 16:00:00 +0800",
    





    
    "snippet": "Windows11 WSL Fedora 版本升级可以直接使用dnf update，使用如下命令：sudo dnf update --releasever=40 -y    本次升级基于Fedora 39版本，如需要升级到其它版本，将上述命令的–releasever变更为其它版本即可。等待更新完成之后检查。",
    "content": "Windows11 WSL Fedora 版本升级可以直接使用dnf update，使用如下命令：sudo dnf update --releasever=40 -y    本次升级基于Fedora 39版本，如需要升级到其它版本，将上述命令的–releasever变更为其它版本即可。等待更新完成之后检查。"
  },
  
  {
    "title": "vim 安装",
    "url": "/posts/vim-%E5%AE%89%E8%A3%85/",
    "categories": "vim",
    "tags": "vim",
    "date": "2024-06-25 16:00:00 +0800",
    





    
    "snippet": "写在前面因为我大部分的运维工作都是在Linux环境中进行的，而且都是命令行操作，为了更加便捷所以决定好好的学习一下vim编辑器。几年前刚接触vi/vim的时候，确实如网上说的那样不知道怎么退出这个神秘的编辑器。又不像图像化界面那样右上角有一个关闭按钮，crtl+c居然也不行，最终靠百度才退出这个难用的编辑器。后来随着工作的原因接触vim的时间也就多了起来。知道怎么退出这个编辑器，除了是在没办...",
    "content": "写在前面因为我大部分的运维工作都是在Linux环境中进行的，而且都是命令行操作，为了更加便捷所以决定好好的学习一下vim编辑器。几年前刚接触vi/vim的时候，确实如网上说的那样不知道怎么退出这个神秘的编辑器。又不像图像化界面那样右上角有一个关闭按钮，crtl+c居然也不行，最终靠百度才退出这个难用的编辑器。后来随着工作的原因接触vim的时间也就多了起来。知道怎么退出这个编辑器，除了是在没办法还是不想用这个玩意儿的。无法像Windows使用crtl+c和crtl+v复制粘贴，编辑器起来真是痛苦，很多时候都是把文件从服务器上传送到本地之后修改，在传送到服务器上。或者在命令行使用管道符和cat的方式将一大段文本写入到文件中。后来慢慢的喜欢上了这个编辑器，编辑文本的效率真的快。还有一个原因是作为IT从业者，很多时候都在座位上坐着，右手长时间使用鼠标导致手臂和食指有点难受，确定尝试一段时间vim。虽然一开始很痛苦，也看了网上关于vim的看法，以及nvim和emacs的对比，不过考虑到Linux环境中一般都安装有vim，为了习惯运维环境，最后还是确定选择vim。使用了一段时间之后右手确实舒服了很多。本人也喜欢折腾各种环境，前段时间利用github pages搭建了一个个人站点，所以也准备将vim的学习和使用通过博客记录下来。安装通过软件仓库安装## Linux系列sudo dnf install -y vim## debiansudo apt install -y vim通过源码编译安装安装依赖## aptapt install -y libncurses-devapt install -y python3-dev## dnfdnf install -y python3-develdnf install -y ncurses-devel获取源码cd ~git clone https://github.com/vim/vim.git编译安装cd vimmake distclean ## 如果之前编译过使用此命令清除缓存## python3-config --configdir 就是操作系统自带的 python3 的 config 目录，/usr/lib/python3.7/config-3.7m-x86_64-linux-gnu ，如果没有这个命令就直接写路径./configure --with-features=huge \\            --enable-multibyte \\            --enable-rubyinterp=yes \\            --enable-python3interp=yes \\            --with-python3-config-dir=$(python3-config --configdir) \\            --enable-luainterp=yes \\            --enable-gui=gtk2 \\            --enable-cscope \\            --prefix=/usr/local/make VIMRUNTIMEDIR=/usr/local/share/vim/vim91cd ~/vimsudo make installvim --version安装gvim如果准备在Windows或者带有桌面的Linux环境中使用vim的话，还是建议把gvim也安装了。Windows直接在download : vim online下载对应的安装包安装即可。Redhat系列sudo dnf install -y vim-X11debain系列sudo apt install -y vim-gui-common设置vim为默认输入法设置环境变量的方式vim ~/.bashrcexport EDITOR=vim通过vim-default长期使用vim之后，不习惯nano，所以直接卸载了nano## 如果后续还需要使用nano的话 可以省略卸载nano rpm -qa | grep -i nanosudo dnf remove nano### 或者直接安装vim-default，先卸载nano-defaultsudo dnf remove nano-default-editor -ysudo dnf install vim-default-editor -y总结vim在编辑文件这一方面个人觉得还是效率还是很高的。我也不需要开发大型的项目，所以使用日常使用vim感觉能提高不少效率。我也会使用vscode和vstudio，在编写python的时候也会使用pycharm，通过这些ide可以让我更加方便编写对应的开发语言。所以ide和vim我都会搭配使用。"
  },
  
  {
    "title": "查看磁盘是SSD还是HDD",
    "url": "/posts/Linux-%E6%9F%A5%E7%9C%8B%E7%A3%81%E7%9B%98%E6%98%AFSSD%E8%BF%98%E6%98%AFHDD/",
    "categories": "linux, Tutorial",
    "tags": "linux",
    "date": "2024-02-27 00:34:00 +0800",
    





    
    "snippet": "lsscsi通过lsscsi命令查看。lsscsi命令来自英文词组“List SCSI”的缩写，其功能是用于列出SCSI设备及属性信息，SCSI全称为small computer system interface，是一种常用的小型计算机系统接口。lsscsi命令可以很方便地帮助管理员区分哪些是固态硬盘、哪些是SATA盘、哪些是FC盘。不过在我的腾讯云服务器和旧的笔记本上都没有获取到对应的信息...",
    "content": "lsscsi通过lsscsi命令查看。lsscsi命令来自英文词组“List SCSI”的缩写，其功能是用于列出SCSI设备及属性信息，SCSI全称为small computer system interface，是一种常用的小型计算机系统接口。lsscsi命令可以很方便地帮助管理员区分哪些是固态硬盘、哪些是SATA盘、哪些是FC盘。不过在我的腾讯云服务器和旧的笔记本上都没有获取到对应的信息。如果你也无法通过lsscsi获取到磁盘类型的话，可以通过下文lsblk命令获取。lsscsi命令英文手册https://sg.danny.cz/scsi/lsscsi.htmllsscsi 命令语法：lsscsi [选项] [H:C:T:L]lsscsi 命令选项：            选项      含义                  -g      显示SCSI通用设备文件名称              -k      显示内核名称而不是设备节点名              -d      显示设备节点的主要号码和次要号码              -H      列出当前连接到系统的SCSI主机而不是SCSI设备              -l      显示每一个SCSI设备（主机）的附加信息              -c      相对于执行 cat /proc/scsi/scsi 命令的输出              -p      显示额外的数据完整性（保护）的信息              -t      显示传输信息              -L      以“属性名=值”的方式显示附加信息              -v      当信息找到时输出目录名              -y      假设sysfs挂载在指定路径而不是默认的 “/sys”              -s      显示容量大小。              -c      用全称显示默认的信息。              -d      显示设备主，次设备号。              -g      显示对应的sg设备名。              -H      显示主机控制器列表，-Hl,-Hlv。              -l      显示相关属性，-ll,-lll=-L。              -v      显示设备属性所在目录。              -x      以16进制显示lun号。              -p      输出DIF,DIX 保护类型。              -P      输出有效的保护模式信息。              -i      显示udev相关的属性              -w      显示WWN              -t      显示相应传输信息(ATA,FC,SBP,ISCSI,SPI,SAS,SATA,USB)，-Ht,-tl.（包括sas地址）      如果系统没有的话可以直接dnf或者apt安装。#Debianapt-get install lsscsi #Ubuntuapt-get install lsscsi #Alpineapk add lsscsi #Arch Linuxpacman -S lsscsi #Kali Linuxapt-get install lsscsi #CentOSyum install lsscsi #Fedoradnf install lsscsi #Raspbianapt-get install lsscsi #Dockerdocker run cmd.cat/lsscsi lsscsi我的腾讯云服务器，通过lsscsi查看，可以发现是QEMU。## 如果系统没有的话可以直接dnf或者apt安装┌─[root@DarkStarDevC]─[~]└──╼ # dnf install -y lsscsi┌─[root@DarkStarDevC]─[~]└──╼ # lsscsi[0:0:1:0]    cd/dvd  QEMU     QEMU DVD-ROM     2.5+  /dev/sr0腾讯云轻量服务器的信息磁盘信息如下：┌─[root@devC]─[~]└──╼ # lsscsi[0:0:1:0]    cd/dvd  QEMU     QEMU DVD-ROM     2.5+  /dev/sr0大学时期买的笔记本可以查看到的信息如下：wxj@wxj-PC:~$ sudo apt install -y lsscsiwxj@wxj-PC:~$ lsscsi[0:0:0:0]    disk    ATA      KINGSTON SHFS37A BBF0  /dev/sda[2:0:0:0]    disk    ATA      ST500LT012-1DG14 LVM1  /dev/sdblsblklsblk命令的英文是“list block”，即用于列出所有可用块设备的信息，而且还能显示他们之间的依赖关系，但是它不会列出RAM盘的信息。块设备有硬盘，闪存盘，CD-ROM等等。lsblk命令包含util-linux中。通过yum provides lsblk命令查看命令对应的软件包。-d 输出设备名称-o 仅显示特定的列如果rota列的值是1 证明是可以旋转，就是HDD，反之数值是0是SSDwxj@wxj-PC:~$ lsblk  -d -o name,rotaNAME    ROTAsda    0sdb    1┌─[root@DarkStarDevC]─[~]└──╼ # lsblk  -d -o name,rotaNAME  ROTAsr0      1zram0    0vda      1vdb      1获取帮助信息┌─[root@DarkStarDevC]─[~]└──╼ # lsblk --helpUsage: lsblk [options] [&lt;device&gt; ...]List information about block devices.Options: -A, --noempty        don't print empty devices -D, --discard        print discard capabilities -E, --dedup &lt;column&gt; de-duplicate output by &lt;column&gt; -I, --include &lt;list&gt; show only devices with specified major numbers -J, --json           use JSON output format -M, --merge          group parents of sub-trees (usable for RAIDs, Multi-path) -O, --output-all     output all columns -P, --pairs          use key=\"value\" output format -S, --scsi           output info about SCSI devices -N, --nvme           output info about NVMe devices -v, --virtio         output info about virtio devices -T, --tree[=&lt;column&gt;] use tree format output -a, --all            print all devices -b, --bytes          print SIZE in bytes rather than in human readable format -d, --nodeps         don't print slaves or holders -e, --exclude &lt;list&gt; exclude devices by major number (default: RAM disks) -f, --fs             output info about filesystems -i, --ascii          use ascii characters only -l, --list           use list format output -m, --perms          output info about permissions -n, --noheadings     don't print headings -o, --output &lt;list&gt;  output columns -p, --paths          print complete device path -r, --raw            use raw output format -s, --inverse        inverse dependencies -t, --topology       output info about topology -w, --width &lt;num&gt;    specifies output width as number of characters -x, --sort &lt;column&gt;  sort output by &lt;column&gt; -y, --shell          use column names to be usable as shell variable identifiers -z, --zoned          print zone related information     --sysroot &lt;dir&gt;  use specified directory as system root -h, --help           display this help -V, --version        display versionAvailable output columns:    ALIGNMENT  alignment offset      ID-LINK  the shortest udev /dev/disk/by-id link name           ID  udev ID (based on ID-LINK)     DISC-ALN  discard alignment offset          DAX  dax-capable device    DISC-GRAN  discard granularity     DISK-SEQ  disk sequence number     DISC-MAX  discard max bytes    DISC-ZERO  discard zeroes data      FSAVAIL  filesystem size available      FSROOTS  mounted filesystem roots       FSSIZE  filesystem size       FSTYPE  filesystem type       FSUSED  filesystem size used       FSUSE%  filesystem use percentage        FSVER  filesystem version        GROUP  group name         HCTL  Host:Channel:Target:Lun for SCSI      HOTPLUG  removable or hotplug device (usb, pcmcia, ...)        KNAME  internal kernel device name        LABEL  filesystem LABEL      LOG-SEC  logical sector size      MAJ:MIN  major:minor device number       MIN-IO  minimum I/O size         MODE  device node permissions        MODEL  device identifier           MQ  device queues         NAME  device name       OPT-IO  optimal I/O size        OWNER  user name    PARTFLAGS  partition flags    PARTLABEL  partition LABEL        PARTN  partition number as read from the partition table     PARTTYPE  partition type code or UUID PARTTYPENAME  partition type name     PARTUUID  partition UUID         PATH  path to the device node      PHY-SEC  physical sector size       PKNAME  internal parent kernel device name       PTTYPE  partition table type       PTUUID  partition table identifier (usually UUID)           RA  read-ahead of the device         RAND  adds randomness          REV  device revision           RM  removable device           RO  read-only device         ROTA  rotational device      RQ-SIZE  request queue size        SCHED  I/O scheduler name       SERIAL  disk serial number         SIZE  size of the device        START  partition start offset        STATE  state of the device   SUBSYSTEMS  de-duplicated chain of subsystems   MOUNTPOINT  where the device is mounted  MOUNTPOINTS  all locations where device is mounted         TRAN  device transport type         TYPE  device type         UUID  filesystem UUID       VENDOR  device vendor        WSAME  write same max bytes          WWN  unique storage identifier        ZONED  zone model      ZONE-SZ  zone size   ZONE-WGRAN  zone write granularity     ZONE-APP  zone append max bytes      ZONE-NR  number of zones    ZONE-OMAX  maximum number of open zones    ZONE-AMAX  maximum number of active zonesFor more details see lsblk(8)."
  }
  
]

