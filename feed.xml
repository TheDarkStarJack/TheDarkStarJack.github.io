

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://thedarkstarjack.github.io/</id>
  <title>DarkStar</title>
  <subtitle>Blog and portfolio focused on Linux, Database, Shell, Python, CPP, and other technical things.</subtitle>
  <updated>2024-09-03T17:45:17+08:00</updated>
  <author>
    <name>TheDarkStarJack</name>
    <uri>https://thedarkstarjack.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://thedarkstarjack.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="https://thedarkstarjack.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 TheDarkStarJack </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>PostgreSQL 单块读</title>
    <link href="https://thedarkstarjack.github.io/posts/PostgreSQL-%E5%8D%95%E5%9D%97%E8%AF%BB/" rel="alternate" type="text/html" title="PostgreSQL 单块读" />
    <published>2024-09-03T11:37:34+08:00</published>
  
    <updated>2024-09-03T11:37:34+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/PostgreSQL-%E5%8D%95%E5%9D%97%E8%AF%BB/</id>
    <content src="https://thedarkstarjack.github.io/posts/PostgreSQL-%E5%8D%95%E5%9D%97%E8%AF%BB/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="DataBase" />
    
    <category term="PostgreSQL" />
    
  

  <summary>前言

什么是单块读？顾名思义，就是每次读取单个 block 。

Oracle 是支持多块读，今天测试一下 PostgreSQL 是否支持多块读，虽然之前听说是不支持的，今天直接测试验证一下。

测试使用的工具为：strace 、pg 15

block_size

PostgreSQL 可以通过 block_size 设置 block 的大小。不过这个参数是只读的，在数据库安装之后就无法修改了。默认是 8K，可以在编译的时候通过选项 --with-blocksize 指定大小，另一个关于 wal 的选项 wal_block_size 最好取值相同。

127.0.0.1:54323; wxj@postgres &amp;amp;gt; select * from pg_settings where name like &amp;#39;%block_size%&amp;#39;;
+-[ RECORD 1 ]----+----...</summary>

  </entry>

  
  <entry>
    <title>Linux 虚拟内存参数 min_free_kbytes</title>
    <link href="https://thedarkstarjack.github.io/posts/Linux-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E5%8F%82%E6%95%B0-min_free_kbytes/" rel="alternate" type="text/html" title="Linux 虚拟内存参数 min_free_kbytes" />
    <published>2024-08-30T11:51:27+08:00</published>
  
    <updated>2024-08-30T11:51:27+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/Linux-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E5%8F%82%E6%95%B0-min_free_kbytes/</id>
    <content src="https://thedarkstarjack.github.io/posts/Linux-%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E5%8F%82%E6%95%B0-min_free_kbytes/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="内存" />
    
  

  <summary>前言

Linux 的虚拟内存参数列在 /proc/sys/vm 目录中，可以直接查看对应的文件。

前几天调整了 Oracle SGA 大小，结果运行没多久就挂掉了，检查日志发生了 OOM，虽然使用率比较高，可是检查内存还有 2G 的空闲，最开始以为是设置了 操作系统用户的内存使用限制，可是也不应该是 OOM，不过还是设置为了 unlimit 。重启之后运行两个小时之后又宕机了。还是提示 OOM，检查系统的内存参数配置，发现设置了 vm.min_free_kbytes 换算之有 5G 大小。客户环境也不是自己搭建的，不清楚为什么设置这么大，减少大小或则直接取消改参数的配置，采用系统默认大小之后恢复正常。

可以设置一定大小，避免在业务运行时系统因为内存问题宕机，不过也不建议设置太大。
┌─[wxj@TheDarkStar]─[~]
└──╼ $ cat /proc/sys/vm/m...</summary>

  </entry>

  
  <entry>
    <title>PostrgeSQL 常用函数（持续更新）</title>
    <link href="https://thedarkstarjack.github.io/posts/PostrgeSQL-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/" rel="alternate" type="text/html" title="PostrgeSQL 常用函数（持续更新）" />
    <published>2024-08-28T15:29:36+08:00</published>
  
    <updated>2024-08-28T15:29:36+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/PostrgeSQL-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <content src="https://thedarkstarjack.github.io/posts/PostrgeSQL-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="DataBase" />
    
    <category term="PostrgeSQL" />
    
  

  <summary>前言

记录一些 PostgreSQL 的常用函数

字符串

字符串/字段拼接

string_agg

string_agg：用于拼接字段，需要两个参数，第一个是需要进行拼接的字段名，第二个是用于拼接字符的拼接符号
select string_agg(a,&amp;#39;, &amp;#39;) from tab1;



如果字段不是字符类型，例如字段是数字类型，需要先转换为字符才能进行拼接，否则会报错

|| ：和 Oracle 一样，可以用于拼接字符或者字段，如果是不是拼接的字段，字符串需要在两个单引号内
select a || &amp;#39;,&amp;#39; || b from tab1 ;
select &amp;#39;a&amp;#39; || &amp;#39;,&amp;#39; || &amp;#39;b&amp;#39; ;


类型转换

可以使用 cast 函数或者双冒号 ::
select a::text from tab1;
select 1::text;

select cast(a as te...</summary>

  </entry>

  
  <entry>
    <title>podman 修改仓库源</title>
    <link href="https://thedarkstarjack.github.io/posts/podman-%E4%BF%AE%E6%94%B9%E4%BB%93%E5%BA%93%E6%BA%90/" rel="alternate" type="text/html" title="podman 修改仓库源" />
    <published>2024-08-28T11:21:43+08:00</published>
  
    <updated>2024-08-28T11:21:43+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/podman-%E4%BF%AE%E6%94%B9%E4%BB%93%E5%BA%93%E6%BA%90/</id>
    <content src="https://thedarkstarjack.github.io/posts/podman-%E4%BF%AE%E6%94%B9%E4%BB%93%E5%BA%93%E6%BA%90/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="containers" />
    
    <category term="podman" />
    
  

  <summary>前言

Podman 是一个开源的容器运行时项目，可在大多数 Linux 平台上使用（Windows 下也可以运行，不过个人还没测试）。Podman 提供与 Docker 非常相似的功能。它不需要在你的系统上运行任何守护进程，并且它也可以在没有 root 权限的情况下运行。

Podman 可以管理和运行任何符合 OCI（Open Container Initiative）规范的容器和容器镜像。Podman 提供了一个与 Docker 兼容的命令行前端来管理 Docker 镜像。

虽然目前容器化部署基本都采用 docker ，但是随着 RedHat 系列的 Linux 升级到 8 之后基本就采用 podman 作为自身的容器化产品之后，已经不能通过软件仓库安装 docker 了，虽然可以通过一些方法安装 docker ，但是个人还是比较喜欢使用 RedHat 系列，所以也就尝试使用...</summary>

  </entry>

  
  <entry>
    <title>PostgreSQL 配置密码验证策略</title>
    <link href="https://thedarkstarjack.github.io/posts/PostgreSQL-%E9%85%8D%E7%BD%AE%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E7%AD%96%E7%95%A5/" rel="alternate" type="text/html" title="PostgreSQL 配置密码验证策略" />
    <published>2024-08-27T13:55:20+08:00</published>
  
    <updated>2024-08-27T13:55:20+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/PostgreSQL-%E9%85%8D%E7%BD%AE%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E7%AD%96%E7%95%A5/</id>
    <content src="https://thedarkstarjack.github.io/posts/PostgreSQL-%E9%85%8D%E7%BD%AE%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E7%AD%96%E7%95%A5/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="DataBase" />
    
    <category term="PostgreSQL" />
    
  

  <summary>概述
数据库等保的时候会遇到一些安全加固操作，其中 PostgreSQL 数据库设置密码验证失败延迟时间可以通过安装 auth_delay 扩展插件来实现，该设置主要是防止暴力破解，在验证失败后, 会延迟一段时间后，才能继续验证。可以搭配 passwordcheck 限制简单密码。

一般来说 ‘passwordcheck、auth_delay’ 两个插件就在源码路径中的 contrid 目录下。源码编译安装 PostgreSQL 可以参考我之前写的脚本一键安装。

编译安装插件
下载相同版本的源码解压之后进入目录，在安装插件之前请先编译源码，然后进入插件的路径进行安装插件，如果在编译时新建的编译目录，例如 build ，需要进入 ‘build/contrib’ 路径下：
cd /software/postgresql-15.4/contrib/
# 安装命令
make &amp;amp;amp;&amp;amp;...</summary>

  </entry>

</feed>


