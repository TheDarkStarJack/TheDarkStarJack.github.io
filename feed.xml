

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://thedarkstarjack.github.io/</id>
  <title>DarkStar</title>
  <subtitle>Blog and portfolio focused on Linux, Database, Shell, Python, CPP, and other technical things.</subtitle>
  <updated>2024-09-05T17:35:47+08:00</updated>
  <author>
    <name>TheDarkStarJack</name>
    <uri>https://thedarkstarjack.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://thedarkstarjack.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="https://thedarkstarjack.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 TheDarkStarJack </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Linux 利用 wc 统计行数和字符长度</title>
    <link href="https://thedarkstarjack.github.io/posts/Linux-%E5%88%A9%E7%94%A8-wc-%E7%BB%9F%E8%AE%A1%E8%A1%8C%E6%95%B0%E5%92%8C%E5%AD%97%E7%AC%A6%E9%95%BF%E5%BA%A6/" rel="alternate" type="text/html" title="Linux 利用 wc 统计行数和字符长度" />
    <published>2024-09-05T16:18:22+08:00</published>
  
    <updated>2024-09-05T16:18:22+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/Linux-%E5%88%A9%E7%94%A8-wc-%E7%BB%9F%E8%AE%A1%E8%A1%8C%E6%95%B0%E5%92%8C%E5%AD%97%E7%AC%A6%E9%95%BF%E5%BA%A6/</id>
    <content src="https://thedarkstarjack.github.io/posts/Linux-%E5%88%A9%E7%94%A8-wc-%E7%BB%9F%E8%AE%A1%E8%A1%8C%E6%95%B0%E5%92%8C%E5%AD%97%E7%AC%A6%E9%95%BF%E5%BA%A6/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="tools" />
    
  

  <summary>前言

在 Linux 环境中可以利用 wc 工具统计行数和字符长度等

统计行数和字符长度

wc 使用特别简单，可以使用 wc --help 查看使用帮助，本文主要记录一下统计行数和字符长度的时候遇到的一个小问题，统计字符的长度不准

在统计一个字符长度的时候明明是 24 位，但是 wc 的结果却是 25
┌─[postgres@darkstarc]─[/Postgres/tools]
└──╼ $ echo 000000010000000000000001 | wc -m
25

还好我记得长度是 24 ，wc 统计的结果却是 25，多出来一个字符长度，这是什么原因呢？
┌─[postgres@darkstarc]─[/Postgres/tools]
└──╼ $ echo 1 | wc -m
2
┌─[postgres@darkstarc]─[/Postgres/tools]...</summary>

  </entry>

  
  <entry>
    <title>PostgreSQL Write Ahead Logging WAL</title>
    <link href="https://thedarkstarjack.github.io/posts/PostgreSQL-Write-Ahead-Logging-WAL/" rel="alternate" type="text/html" title="PostgreSQL Write Ahead Logging WAL" />
    <published>2024-09-05T15:15:35+08:00</published>
  
    <updated>2024-09-05T15:15:35+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/PostgreSQL-Write-Ahead-Logging-WAL/</id>
    <content src="https://thedarkstarjack.github.io/posts/PostgreSQL-Write-Ahead-Logging-WAL/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="DataBase" />
    
    <category term="PostgreSQL" />
    
  

  <summary>前言

WAL 是 Write Ahead Log 的缩写，预写式日志。WAL log 也被称为 xlog 。WalWriter 进程就是写 WAL 日志的进程。预写式日志的概念就是在修改数据之前，必须要把这些修改操作记录到磁盘中，这样后面更新实际数据时，就不需要实时地把数据持久化到文件中了。即使机器突然宕机或数据库异常退出，导致一部分内存中的脏数据没有及时地刷新到文件中，在数据库重启后，通过读取 WAL 日志，并把最后一部分的 WAL 日志重新执行一遍，就可以恢复到宕机时的状态。

作用

WAL 可以理解为 pg 数据库的重做日志与 Oracle 的Redo Log 的功能是一样的。

因为 WAL 的存在，所以日志类型的文件系统对于 pg 来说不是必须的。例如 zfs 就是日志类型的文件系统，在持久化之前会记录日志，保证数据的原子性。（而且每当新数据写入 ZFS 时，它都会为该...</summary>

  </entry>

  
  <entry>
    <title>PostgreSQL WAL 相关参数</title>
    <link href="https://thedarkstarjack.github.io/posts/PostgreSQL-WAL-%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/" rel="alternate" type="text/html" title="PostgreSQL WAL 相关参数" />
    <published>2024-09-05T15:09:00+08:00</published>
  
    <updated>2024-09-05T15:09:00+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/PostgreSQL-WAL-%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/</id>
    <content src="https://thedarkstarjack.github.io/posts/PostgreSQL-WAL-%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="DataBase" />
    
    <category term="PostgreSQL" />
    
  

  <summary>前言

WAL 是 PostgreSQL 的关键组件，用于保证崩溃恢复时数据完整一致，在这里记录一下相关的参数

WAL 参数

不同的版本可能参数不一样，具体可以查询官网或者进入实例之后查询：
-- PostgreSQL 15.8 
-- 如果需要参数描述和范围可以查看 short_desc, extra_desc, context 字段
127.0.0.1:54323; wxj@demo &amp;amp;gt; select name, setting, unit from pg_settings where name like &amp;#39;%wal%&amp;#39;;
+-------------------------------+-----------+------+
|             name              |  setting  | unit |
+------------------...</summary>

  </entry>

  
  <entry>
    <title>Windows 利用 Netsh 管理 WiFi 连接</title>
    <link href="https://thedarkstarjack.github.io/posts/Windows-%E5%88%A9%E7%94%A8-Netsh-%E7%AE%A1%E7%90%86-WiFi-%E8%BF%9E%E6%8E%A5/" rel="alternate" type="text/html" title="Windows 利用 Netsh 管理 WiFi 连接" />
    <published>2024-09-05T10:33:43+08:00</published>
  
    <updated>2024-09-05T10:33:43+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/Windows-%E5%88%A9%E7%94%A8-Netsh-%E7%AE%A1%E7%90%86-WiFi-%E8%BF%9E%E6%8E%A5/</id>
    <content src="https://thedarkstarjack.github.io/posts/Windows-%E5%88%A9%E7%94%A8-Netsh-%E7%AE%A1%E7%90%86-WiFi-%E8%BF%9E%E6%8E%A5/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Windows" />
    
    <category term="Network" />
    
  

  <summary>前言

基本现在的轻薄笔记本都已经没有网线接口了，除了拓展坞之外只能使用 WiFi 连接网络。当我们重装系统或者更换电脑的时候需要重新配置网络，手动配置的方式效率较低，可以利用 Windows 下的 netsh 工具备份已有的 WiFi 连接信息，然后在其他机器导入或者重装系统之后恢复 WiFi 信息。

在 Windows 中可以通过 控制面板的网络管理，或者网卡属性查看 WiFi 信息。不过比较麻烦，可以通过命令行的方式管理网络，主要命令是 netsh

微软从 Windows 2000 开始便内置了一个 Netsh（Network Shell）命令行工具，以帮助用户执行本地或远程计算机上不同网卡的信息查看、配置及排错工作。
因为涉及网络的管理配置，所以在使用 Netsh 的时候请使用管理员用户打开 cmd、powershell、或者 Windows terminal 等终端工具...</summary>

  </entry>

  
  <entry>
    <title>查看 g++编译器默认编译标准</title>
    <link href="https://thedarkstarjack.github.io/posts/%E6%9F%A5%E7%9C%8B-g++%E7%BC%96%E8%AF%91%E5%99%A8%E9%BB%98%E8%AE%A4%E7%BC%96%E8%AF%91%E6%A0%87%E5%87%86/" rel="alternate" type="text/html" title="查看 g++编译器默认编译标准" />
    <published>2024-09-04T14:24:27+08:00</published>
  
    <updated>2024-09-04T14:24:27+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/%E6%9F%A5%E7%9C%8B-g++%E7%BC%96%E8%AF%91%E5%99%A8%E9%BB%98%E8%AE%A4%E7%BC%96%E8%AF%91%E6%A0%87%E5%87%86/</id>
    <content src="https://thedarkstarjack.github.io/posts/%E6%9F%A5%E7%9C%8B-g++%E7%BC%96%E8%AF%91%E5%99%A8%E9%BB%98%E8%AE%A4%E7%BC%96%E8%AF%91%E6%A0%87%E5%87%86/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="gcc" />
    
  

  <summary>简单记录下怎么查看当前 g++ 编译器默认支持的 cpp 标准，毕竟 cpp 20 都已经出来几年了，有些特性编译器还没有完全支持

g++ -dM -E -x c++ /dev/null | grep __cplusplus


如果要查看 g++ 是否支持 cpp 20 可以执行以下命令
g++ -std=c++20 -E -x c++ - &amp;amp;lt;&amp;amp;lt;&amp;amp;lt; &amp;quot;&amp;quot;

如果你的 g++ 版本支持 C++20，那么该命令将不会报错，而会输出一些编译的信息。如果你的 g++ 版本不支持 C++20，那么该命令将会提示错误信息，告诉你该标志不被支持。

更多的信息可以参考以下网址：

https://en.cppreference.com/w/cpp/compiler_support/20

https://cplusplus.com/doc/tutorial/</summary>

  </entry>

</feed>


