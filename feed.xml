

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://thedarkstarjack.github.io/</id>
  <title>DarkStar</title>
  <subtitle>Blog and portfolio focused on Linux, Database, Shell, Python, CPP, and other technical things.</subtitle>
  <updated>2024-08-19T17:12:09+08:00</updated>
  <author>
    <name>TheDarkStarJack</name>
    <uri>https://thedarkstarjack.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://thedarkstarjack.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="https://thedarkstarjack.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 TheDarkStarJack </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>awk按列求和</title>
    <link href="https://thedarkstarjack.github.io/posts/awk%E6%8C%89%E5%88%97%E6%B1%82%E5%92%8C/" rel="alternate" type="text/html" title="awk按列求和" />
    <published>2024-08-19T15:27:57+08:00</published>
  
    <updated>2024-08-19T15:27:57+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/awk%E6%8C%89%E5%88%97%E6%B1%82%E5%92%8C/</id>
    <content src="https://thedarkstarjack.github.io/posts/awk%E6%8C%89%E5%88%97%E6%B1%82%E5%92%8C/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="awk" />
    
  

  <summary>Linux 下的 awk 功能十分强大，擅长按照字段列处理文本，另一个工具 sed 则擅长用于行处理。

有的时候需要按照过滤筛选之后文本的文本求和，一般的方法就是通过 bc 或者复制粘贴到 excel 中处理，也可以使用 awk 处理。


  指定分隔符 ： -F|-IFS 选项用于指定分隔符，默认为空格，如果存在特殊字符记得使用单引号或者转义符
  内部变量 ： awk 中存在部分内部变量，可以直接使用 $varname 使用，例如 $NF 表示最后一个字段列；$num 表示列的序号，例如 $1 表示第一列; NR 表示记录的所在的行号，可以使用 ‘{print NR}’ 打印所在的行号。
  自定义变量 : -v var=val, 如果在花括号 {} 中，可以直接使用变量名直接赋值
  自定义输出分隔符 ： -OFS 选项可以自定义输出分隔符，默认为空格。有的时候需要将数据保...</summary>

  </entry>

  
  <entry>
    <title>vim 设置变量</title>
    <link href="https://thedarkstarjack.github.io/posts/vim-%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F/" rel="alternate" type="text/html" title="vim 设置变量" />
    <published>2024-08-02T14:48:26+08:00</published>
  
    <updated>2024-08-02T14:48:26+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/vim-%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F/</id>
    <content src="https://thedarkstarjack.github.io/posts/vim-%E8%AE%BE%E7%BD%AE%E5%8F%98%E9%87%8F/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Vim" />
    
    <category term="Variables" />
    
  

  <summary>let 和 set 区别
在Vim中，let命令用于赋值操作，它可以用于设置变量、选项、寄存器和环境变量的值。与set命令相比，let的主要区别在于它不仅可以用于设置选项，还可以用于设置变量、寄存器和环境变量。此外，let命令的右侧是一个表达式，这意味着你可以在赋值操作中使用表达式的结果。这使得let命令在Vim脚本中非常灵活，可以用于更复杂的操作，如数学运算、字符串操作和函数调用。

在 Vimscript 和 Lua 中，let 和 set 的语法有一些规则，尤其是关于等号两边是否需要空格。

let 语法
在 Vimscript 中，使用 let 语句设置变量时，等号两边可以有空格，但也可以没有空格。下面是几种合法的写法：

let myvar = 10       &amp;quot; 等号两边有空格
let myvar=10         &amp;quot; 等号两边没有空格
let myvar =10 ...</summary>

  </entry>

  
  <entry>
    <title>powershell 获取连接过的 wifi 信息和密码</title>
    <link href="https://thedarkstarjack.github.io/posts/powershell-%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%9A%84-wifi-%E4%BF%A1%E6%81%AF%E5%92%8C%E5%AF%86%E7%A0%81/" rel="alternate" type="text/html" title="powershell 获取连接过的 wifi 信息和密码" />
    <published>2024-08-01T16:42:21+08:00</published>
  
    <updated>2024-08-01T16:42:21+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/powershell-%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%9A%84-wifi-%E4%BF%A1%E6%81%AF%E5%92%8C%E5%AF%86%E7%A0%81/</id>
    <content src="https://thedarkstarjack.github.io/posts/powershell-%E8%8E%B7%E5%8F%96%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%9A%84-wifi-%E4%BF%A1%E6%81%AF%E5%92%8C%E5%AF%86%E7%A0%81/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Windows" />
    
    <category term="PowerShell" />
    
  

  <summary>工作的时候需要涉及多个办公地点，不同的现场需要连接不同的 WiFi 。怎么查看 WiFi 信息呢，可以通过以下 PowerShell 获取所有已经连接的 WiFi 信息：
## 当我们在 Windwos 10 中连接过不同的 WIFI 之后，操作系统都会自动生成一个单独的「无线网络配置文件」并存储在计算机中，使用如下命令我们便可以看到当前系统中所有连接过的 WIFI 配置文件：
Netsh WLAN show profiles
## 查看密码
Netsh WLAN show profile name=&amp;quot;无线名称&amp;quot; key=clear

#############
# 获取连接过的wifi的密码
Function Get-WIFIPasswords(){
    $pfs = netsh wlan show profiles | Select-String &amp;quot;所有用户配置文件&amp;quot;

  ...</summary>

  </entry>

  
  <entry>
    <title>wsl安装deepin</title>
    <link href="https://thedarkstarjack.github.io/posts/wsl%E5%AE%89%E8%A3%85deepin/" rel="alternate" type="text/html" title="wsl安装deepin" />
    <published>2024-07-31T10:30:34+08:00</published>
  
    <updated>2024-07-31T10:30:34+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/wsl%E5%AE%89%E8%A3%85deepin/</id>
    <content src="https://thedarkstarjack.github.io/posts/wsl%E5%AE%89%E8%A3%85deepin/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="Deepin" />
    
  

  <summary>办公用的笔记本虽然使用的 Windows ，不过家里的电脑安装 deepin 使用过一段时间，虽然有些 bug 或者软件包的缺失，不过日常使用还是可以，前提是不要随便更新，但是我是一个比较喜欢软件最新版本的用户，一般软件发布了新版我就会选择更新。在经历了好几次更新 deepin 导致我重启无法进入桌面之后我就放弃了 deepin …..。不过很多国内的软件，例如微信、百度网盘、迅雷等软件都可以使用，早期很多软件没有 Linux 原生版本的时候还开发了 wine ，使很多没有提供 Linux 版本的软件能在 Linux 上运行。虽然个人比较喜欢 CentOS ，不过随着 CentOS 的发行策略的改变，现在使用 Fedora 更多。不过很多国内的软件都不能直接在上面运行，要么只有 deb 版本。

随着 WSL2 的到来，和 Windows 11 提供的 Windows termina...</summary>

  </entry>

  
  <entry>
    <title>编译 WSL 的内核</title>
    <link href="https://thedarkstarjack.github.io/posts/%E7%BC%96%E8%AF%91-WSL-%E7%9A%84%E5%86%85%E6%A0%B8/" rel="alternate" type="text/html" title="编译 WSL 的内核" />
    <published>2024-07-26T10:19:06+08:00</published>
  
    <updated>2024-07-26T10:19:06+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/%E7%BC%96%E8%AF%91-WSL-%E7%9A%84%E5%86%85%E6%A0%B8/</id>
    <content src="https://thedarkstarjack.github.io/posts/%E7%BC%96%E8%AF%91-WSL-%E7%9A%84%E5%86%85%E6%A0%B8/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Windows" />
    
    <category term="WSL" />
    
  

  <summary>默认情况下，适用于 Linux 版本的 Windows 子系统 （WSL2） 使用长期支持 （lts） Linux 内核。虽然当前的 WSL2 内核基于 Linux 内核的 5.x 版本，但最新的 lts 版本是 6.x 版本。
┌─[wxj@TheDarkStar]─[/software/WSL]
└──╼ $ uname -a
Linux TheDarkStar 5.15.153.1-microsoft-standard-WSL2 #1 SMP Fri Mar 29 23:14:13 UTC 2024 x86_64 GNU/Linux



可以看到目前我的 WSL 内核版本还是使用的 5.x ，官网并没有直接提供编译好的内核，如果想使用最新的内核则需要手动编译。可以到这里 下载最新或者指定的内核代码，然后编译。虽然官方建议使用 Ubuntu 编译，但是个人更喜欢使用 RedHa...</summary>

  </entry>

</feed>


