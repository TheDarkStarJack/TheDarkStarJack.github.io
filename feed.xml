

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://thedarkstarjack.github.io/</id>
  <title>DarkStar</title>
  <subtitle>Blog and portfolio focused on Linux, Database, Shell, Python, CPP, and other technical things.</subtitle>
  <updated>2024-08-27T11:54:28+08:00</updated>
  <author>
    <name>TheDarkStarJack</name>
    <uri>https://thedarkstarjack.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://thedarkstarjack.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="https://thedarkstarjack.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 TheDarkStarJack </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>vim 匹配指定行号的内容</title>
    <link href="https://thedarkstarjack.github.io/posts/vim-%E5%8C%B9%E9%85%8D%E6%8C%87%E5%AE%9A%E8%A1%8C%E5%8F%B7%E7%9A%84%E5%86%85%E5%AE%B9/" rel="alternate" type="text/html" title="vim 匹配指定行号的内容" />
    <published>2024-08-27T10:39:27+08:00</published>
  
    <updated>2024-08-27T10:39:27+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/vim-%E5%8C%B9%E9%85%8D%E6%8C%87%E5%AE%9A%E8%A1%8C%E5%8F%B7%E7%9A%84%E5%86%85%E5%AE%B9/</id>
    <content src="https://thedarkstarjack.github.io/posts/vim-%E5%8C%B9%E9%85%8D%E6%8C%87%E5%AE%9A%E8%A1%8C%E5%8F%B7%E7%9A%84%E5%86%85%E5%AE%B9/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="Vim" />
    
  

  <summary>有的时候明确知道需要保留那些行，虽然可以采用匹配每行的字符，但是可能需要保留的行的内容在其他行中也存在，这个时候可以利用 vim/nvim 的 \% 特殊字符匹配指定的行内容。

再结合 :g 、:g!、 :v 来选择/反选指定的行/列内容可以高效的过滤行


  
    
      符号
      含义
      备注
    
  
  
    
      \%
      用于匹配行号或列号
       
    
    
      \%^
      匹配文件开始的位置
       
    
    
      \%Nl
      匹配指定的[n]行，l 表示行号，line
       
    
    
      \%&amp;#39;m
      匹配指定的 m 标记
       
    
    
      \%&amp;amp;gt;&amp;#39;m
      匹配在 ...</summary>

  </entry>

  
  <entry>
    <title>sed 检查 Oracle日志 并输出对应的行号</title>
    <link href="https://thedarkstarjack.github.io/posts/sed-%E6%A3%80%E6%9F%A5-Oracle%E6%97%A5%E5%BF%97-%E5%B9%B6%E8%BE%93%E5%87%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E8%A1%8C%E5%8F%B7/" rel="alternate" type="text/html" title="sed 检查 Oracle日志 并输出对应的行号" />
    <published>2024-08-26T16:45:20+08:00</published>
  
    <updated>2024-08-26T16:45:20+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/sed-%E6%A3%80%E6%9F%A5-Oracle%E6%97%A5%E5%BF%97-%E5%B9%B6%E8%BE%93%E5%87%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E8%A1%8C%E5%8F%B7/</id>
    <content src="https://thedarkstarjack.github.io/posts/sed-%E6%A3%80%E6%9F%A5-Oracle%E6%97%A5%E5%BF%97-%E5%B9%B6%E8%BE%93%E5%87%BA%E5%AF%B9%E5%BA%94%E7%9A%84%E8%A1%8C%E5%8F%B7/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="sed" />
    
  

  <summary>在护网的时候可能需要定期检查日志文件，特别是日志文件中的错误信息，在 alert 日志中常见的报错一般都是 Error、ORA-、TNS- 为前缀的信息。我们可以利用 sed 工具检索日志文件中的信息，减少重复工作。

可以利用一下语句过滤错误信息：
## 一般来说 alert 日志的路径为
## ${ORACLE_BASE}/diag/rdbms/${ORACLE_SID}/${ORACLE_SID}/tracle/alert_${ORACLE_SID}.log
## 因为安装的原因，rdbms 下之后路径可能为大小或者小写的 ${ORACLE_SID} ，具体可以进入 rdbms 路径之后选择
## diag 的路径也可以进入实例之后使用 `show parameter diag` 查看
sed -n  &amp;#39;/Mon Aug 26 08/,/Mon Aug 26 09/p&amp;#39; ale...</summary>

  </entry>

  
  <entry>
    <title>vim 特殊字符记录(持续更新)</title>
    <link href="https://thedarkstarjack.github.io/posts/vim-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%AE%B0%E5%BD%95(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/" rel="alternate" type="text/html" title="vim 特殊字符记录(持续更新)" />
    <published>2024-08-22T16:23:44+08:00</published>
  
    <updated>2024-08-23T17:33:25+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/vim-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%AE%B0%E5%BD%95(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/</id>
    <content src="https://thedarkstarjack.github.io/posts/vim-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%AE%B0%E5%BD%95(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="Vim" />
    
  

  <summary>记录一些 vim/nvim 的特殊字符含义，持续更新。

正则表达式中的特殊字符
这类符号的完整列表可参考文档 :help ordinary-atom


  
    
      符号
      含义
      备注
    
  
  
    
      .
      任意字符，但是不包括行尾
       
    
    
      ^
      行首
       
    
    
      $
      行尾
       
    
    
      \_
      任意字符，包括行尾
       
    
    
      \&amp;amp;lt;
      单词开始
      精准匹配单词，例如 a 和 am ， \&amp;amp;lt;a\&amp;amp;gt; 就仅匹配单词 a
    
    
      \&amp;amp;gt;
      单词结尾
      同 ...</summary>

  </entry>

  
  <entry>
    <title>vim 分组和交替(grouping and alternation)</title>
    <link href="https://thedarkstarjack.github.io/posts/vim-%E5%88%86%E7%BB%84%E5%92%8C%E4%BA%A4%E6%9B%BF(grouping-and-alternation)/" rel="alternate" type="text/html" title="vim 分组和交替(grouping and alternation)" />
    <published>2024-08-22T15:25:31+08:00</published>
  
    <updated>2024-08-22T15:25:31+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/vim-%E5%88%86%E7%BB%84%E5%92%8C%E4%BA%A4%E6%9B%BF(grouping-and-alternation)/</id>
    <content src="https://thedarkstarjack.github.io/posts/vim-%E5%88%86%E7%BB%84%E5%92%8C%E4%BA%A4%E6%9B%BF(grouping-and-alternation)/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="Vim" />
    
  

  <summary>交替(alternation)操作起到的是“或”的作用，比如，carrot\|parrot  同时匹配 carrot和parrot

分组（grouping）用于将多个字符放在一个组里，这样做有两个好处。首先，分组可以与其他正则表达式组合使用，比如 \(c\|p\)arrot  是一种同时匹配 carrot 和 parrot 的更精准的方式。有的时候用于交换（替换）两个字符的位置十分有用


  
    
      符号
      说明
    
    
      \|
      alternation
    
    
      \(\)
      grouping
    
  


假设存在一下内容：
cat test.txt

table &amp;quot;t1&amp;quot;
table &amp;quot;t2&amp;quot;
table &amp;quot;t3&amp;quot;
table &amp;quot;t4&amp;quot;
table &amp;quot;t5&amp;quot;
table &amp;quot;t6&amp;quot;
...</summary>

  </entry>

  
  <entry>
    <title>vim 排序去重</title>
    <link href="https://thedarkstarjack.github.io/posts/vim-%E6%8E%92%E5%BA%8F%E5%8E%BB%E9%87%8D/" rel="alternate" type="text/html" title="vim 排序去重" />
    <published>2024-08-22T14:18:52+08:00</published>
  
    <updated>2024-08-22T14:18:52+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/vim-%E6%8E%92%E5%BA%8F%E5%8E%BB%E9%87%8D/</id>
    <content src="https://thedarkstarjack.github.io/posts/vim-%E6%8E%92%E5%BA%8F%E5%8E%BB%E9%87%8D/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="Vim" />
    
  

  <summary>在 Linux 中处理文本除了利用 sed、awk、sort、uniq 等工具对文件排序去重，还可以直接使用 vim/nvim 自带的 sort 命令对文件排序去重。虽然功能可能不如外部工具，但是处理一些基本逻辑是没问题的，重要的是可以在此基础上直接处理过滤之后的内容。

:%sort

:%sort：对整个文件的所有行进行排序,对所有行进行排序，排序后相同的行将会相邻。

:%sort u


:%sort u：对整个文件进行排序并去重，u 参数表示 unique，即只保留唯一行

更多的用户可以参考 :help sort</summary>

  </entry>

</feed>


