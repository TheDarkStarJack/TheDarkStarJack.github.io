

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://thedarkstarjack.github.io/</id>
  <title>DarkStar</title>
  <subtitle>Blog and portfolio focused on Linux, Database, Shell, Python, CPP, and other technical things.</subtitle>
  <updated>2024-08-23T17:32:56+08:00</updated>
  <author>
    <name>TheDarkStarJack</name>
    <uri>https://thedarkstarjack.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://thedarkstarjack.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="https://thedarkstarjack.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 TheDarkStarJack </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>vim 特殊字符记录(持续更新)</title>
    <link href="https://thedarkstarjack.github.io/posts/vim-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%AE%B0%E5%BD%95(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/" rel="alternate" type="text/html" title="vim 特殊字符记录(持续更新)" />
    <published>2024-08-22T16:23:44+08:00</published>
  
    <updated>2024-08-22T16:23:44+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/vim-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%AE%B0%E5%BD%95(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/</id>
    <content src="https://thedarkstarjack.github.io/posts/vim-%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%AE%B0%E5%BD%95(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="Vim" />
    
  

  <summary>记录一些 vim/nvim 的特殊字符含义，持续更新。

正则表达式中的特殊字符
这类符号的完整列表可参考文档 :help ordinary-atom


  
    
      符号
      含义
      备注
    
  
  
    
      .
      任意字符，但是不包括行尾
       
    
    
      ^
      行首
       
    
    
      $
      行尾
       
    
    
      \_
      任意字符，包括行尾
       
    
    
      \&amp;amp;lt;
      单词开始
      精准匹配单词，例如 a 和 am ， \&amp;amp;lt;a\&amp;amp;gt; 就仅匹配单词 a
    
    
      \&amp;amp;gt;
      单词结尾
      同 ...</summary>

  </entry>

  
  <entry>
    <title>vim 分组和交替(grouping and alternation)</title>
    <link href="https://thedarkstarjack.github.io/posts/vim-%E5%88%86%E7%BB%84%E5%92%8C%E4%BA%A4%E6%9B%BF(grouping-and-alternation)/" rel="alternate" type="text/html" title="vim 分组和交替(grouping and alternation)" />
    <published>2024-08-22T15:25:31+08:00</published>
  
    <updated>2024-08-22T15:25:31+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/vim-%E5%88%86%E7%BB%84%E5%92%8C%E4%BA%A4%E6%9B%BF(grouping-and-alternation)/</id>
    <content src="https://thedarkstarjack.github.io/posts/vim-%E5%88%86%E7%BB%84%E5%92%8C%E4%BA%A4%E6%9B%BF(grouping-and-alternation)/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="Vim" />
    
  

  <summary>交替(alternation)操作起到的是“或”的作用，比如，carrot\|parrot  同时匹配 carrot和parrot

分组（grouping）用于将多个字符放在一个组里，这样做有两个好处。首先，分组可以与其他正则表达式组合使用，比如 \(c\|p\)arrot  是一种同时匹配 carrot 和 parrot 的更精准的方式。有的时候用于交换（替换）两个字符的位置十分有用


  
    
      符号
      说明
    
    
      \|
      alternation
    
    
      \(\)
      grouping
    
  


假设存在一下内容：
cat test.txt

table &amp;quot;t1&amp;quot;
table &amp;quot;t2&amp;quot;
table &amp;quot;t3&amp;quot;
table &amp;quot;t4&amp;quot;
table &amp;quot;t5&amp;quot;
table &amp;quot;t6&amp;quot;
...</summary>

  </entry>

  
  <entry>
    <title>vim 排序去重</title>
    <link href="https://thedarkstarjack.github.io/posts/vim-%E6%8E%92%E5%BA%8F%E5%8E%BB%E9%87%8D/" rel="alternate" type="text/html" title="vim 排序去重" />
    <published>2024-08-22T14:18:52+08:00</published>
  
    <updated>2024-08-22T14:18:52+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/vim-%E6%8E%92%E5%BA%8F%E5%8E%BB%E9%87%8D/</id>
    <content src="https://thedarkstarjack.github.io/posts/vim-%E6%8E%92%E5%BA%8F%E5%8E%BB%E9%87%8D/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="Vim" />
    
  

  <summary>在 Linux 中处理文本除了利用 sed、awk、sort、uniq 等工具对文件排序去重，还可以直接使用 vim/nvim 自带的 sort 命令对文件排序去重。虽然功能可能不如外部工具，但是处理一些基本逻辑是没问题的，重要的是可以在此基础上直接处理过滤之后的内容。

:%sort

:%sort：对整个文件的所有行进行排序,对所有行进行排序，排序后相同的行将会相邻。

:%sort u


:%sort u：对整个文件进行排序并去重，u 参数表示 unique，即只保留唯一行

更多的用户可以参考 :help sort</summary>

  </entry>

  
  <entry>
    <title>vim 搜索过滤满足条件的行</title>
    <link href="https://thedarkstarjack.github.io/posts/vim-%E6%90%9C%E7%B4%A2%E8%BF%87%E6%BB%A4%E6%BB%A1%E8%B6%B3%E6%9D%A1%E4%BB%B6%E7%9A%84%E8%A1%8C/" rel="alternate" type="text/html" title="vim 搜索过滤满足条件的行" />
    <published>2024-08-22T12:28:53+08:00</published>
  
    <updated>2024-08-22T12:28:53+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/vim-%E6%90%9C%E7%B4%A2%E8%BF%87%E6%BB%A4%E6%BB%A1%E8%B6%B3%E6%9D%A1%E4%BB%B6%E7%9A%84%E8%A1%8C/</id>
    <content src="https://thedarkstarjack.github.io/posts/vim-%E6%90%9C%E7%B4%A2%E8%BF%87%E6%BB%A4%E6%BB%A1%E8%B6%B3%E6%9D%A1%E4%BB%B6%E7%9A%84%E8%A1%8C/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="Linux" />
    
    <category term="Vim" />
    
  

  <summary>有的时候文本内容太多，我们只需要查看满足条件的内容，虽然可以通过 CTRL-g 、n、N 等快速跳转，但是我们可能只需要查看满足条件的内容，例如在排查错误日志的时候，我们只需要查看满足 err1 的错误信息，但是日志中有太多额外的内容，这个时候可以通过 sed 、awk 、grep 等文本工具过滤处理。但是使用 vim/nvim 也可以实现，而且更加方便查看。

可以使用以下几种方法来搜索关键字并将满足条件的行重定向到另一个文件，或者只显示满足条件的行。假设我想要搜索关键字“aaa”.

使用 :vimgrep 和 :cw 仅显示满足条件的行
可以使用 :vimgrep 命令来搜索关键字并将结果显示在快速修复列表中：
:vimgrep /aaa/ %



  :vimgrep：搜索文件中的模式。
  /aaa/：搜索关键字 aaa。
  %：表示当前文件。


然后可以使用 :cw...</summary>

  </entry>

  
  <entry>
    <title>Oracle expdp、impdp使用多个路径</title>
    <link href="https://thedarkstarjack.github.io/posts/Oracle-expdp-impdp%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E8%B7%AF%E5%BE%84/" rel="alternate" type="text/html" title="Oracle expdp、impdp使用多个路径" />
    <published>2024-08-22T12:00:22+08:00</published>
  
    <updated>2024-08-22T12:00:22+08:00</updated>
  
    <id>https://thedarkstarjack.github.io/posts/Oracle-expdp-impdp%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E8%B7%AF%E5%BE%84/</id>
    <content src="https://thedarkstarjack.github.io/posts/Oracle-expdp-impdp%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E8%B7%AF%E5%BE%84/" />
    <author>
      <name>TheDarkStarJack</name>
    </author>

  
    
    <category term="DataBase" />
    
    <category term="Oracle" />
    
  

  <summary>有的时候因为存储空间不足，特别是将生产的数据导入到测试环境，测试环境的空间可能有限。导入的时候可能文件不能放在一个路径下，这个时候就需要使用多个目录，比如 dmp1、dmp2 放在目录 d1 ，其余的文件放在 d2 。

在使用 expdp/impdp 的时候只能通过 DIRECTORY 指定一个目录，但是可以通过选项 DUMPFILE  指定多个文件，文件可以在不同的路径下，以次达到同时使用多个目录/磁盘的效果。

└──╼ $ impdp -help | grep -i dumpfile
     Example: impdp scott/tiger DIRECTORY=dmpdir DUMPFILE=scott.dmp
     Example: impdp scott/tiger DIRECTORY=dmpdir DUMPFILE=scott.dmp
DUMPFILE
For...</summary>

  </entry>

</feed>


